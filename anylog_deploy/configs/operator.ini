# The following provides the different parameters needed by AnyLog-API to deploy an AnyLog instance.
# A user should update a copy of this file, as they may need more than one file depending on their deployment.
# Please note, configs with a hashtag ("#") next to it are optional.

[general]
# Type of node AnyLog should run - users can specify more than one node type in a single instance with comma separating them
#   master - a "notary" system between other nodes in the network via either a public or private blockchain
#   operator - nodes containing generated by sensors. these can be either physical devices (ex. cars) or remote cloud
#   publisher - nodes that simply generate data and send them to operator nodes
#   query - nodes dedicated to query and BI activity
node_type=operator

# AnyLog version to download from Docker Hub
#   develop - code that has been tested and used for a while
#       alpine version: alpine
#       arm64 version: develop-arm64 | alpine-arm64
#   predevelop - code currently being tested
#       alpine version: predevelop-alpine
#       arm64 version: predevelop-arm64 | predevelop-alpine-arm64
build=predevelop

# Name correlated with the node. This will also be used as the container name if deploying AnyLog within AnyLog-API
node_name=anylog-test-operator

# The name of the company correlated with policies declared via this node
company_name=AnyLog Co

# Machine location - If user doesn't declare --disable-location & location isn't set, then AnyLog-API has a process to find the location of the machine
# Note, coordinates location is accessible via Grafana Map visualization
#location=<location> 

[authentication]
# whether or not to enable authentication
authentication=off

# authentication username and password
#username=<auth_username>
#password=<auth_password>

# authentication type
#   admin
#   user
#auth_type=<auth_type>

# credentials expiration (ex. 2 days)
#expiration=<auth_expiration>

[networking] 
# TCP connection information for master node
master_node=10.0.0.231:2048

# TCP port for node used to communicate with other nodes in the network. Please make sure the port is open and available
anylog_tcp_port=2148

# REST port for node used to communicate with other nodes in the network. Please make sure the port is open and available
anylog_rest_port=2149

# a local MQTT broker is supported on Publisher & Operator respectively
# Enable local broker
local_broker=true

# AnyLog Broker Port
anylog_broker_port=2150

[database]
# Logical database name within operator node
default_dbms=anylog_test_db

# Type of database to be used by the AnyLog node
#    PSQL
#    SQLite
db_type=psql

# Database credentials -- ${db_user}@{db_ip}:${db_user_password}
db_user=anylog@127.0.0.1:demo

# Database access port
db_port=5432


[cluster]
# set operator as part of a cluster (True) or not (False) 
enable_cluster=true

# Name of the cluster
cluster_name=anylog-test-cluster

[partition]
# Operator only - whether or not to partition the data stored.
enable_partition=true 

# timestamp column to partition against
partition_column=timestamp

# Interval to partition against (ex. 7 days)
#   hour
#   day
#   month
partition_interval=7 day


[mqtt]
# Run an MQTT client as part of the node (Publisher & Operator only) - if MQTT client has more than 2 columns use the `--deployment-file` option
# URL: https://github.com/AnyLog-co/documentation/blob/master/mqtt.md
mqtt_enable=false

# From  MQTT pull raw data that's not within topic
#mqtt_enable_other=<mqtt_enable_other>

# Connection info for broker
#mqtt_conn_info=<mqtt_conn_info> 

# Port for MQTT 
#mqtt_broker_port=<mqtt_broker_port> 

# Broker log message 
#mqtt_log=<mqtt_log> 

# mqtt topic name to get data from 
#mqtt_topic_name=<mqtt_topic_name>

# mqtt topic for database
#mqtt_topic_dbms=<mqtt_topic_dbms> 

# mqtt topic for table 
#mqtt_topic_table=<mqtt_topic_table> 

# mqtt topic for timestamp column 
#mqtt_column_timestamp=<mqtt_column_timestamp> 

# MQTT 'value' column type support. Options: 
#   int
#   bool 
#   str
#   timestmap 
#mqtt_column_value_type=<mqtt_column_value_type> 


# mqtt topic for value columns 
#mqtt_column_value=<mqtt_column_value> 

# MQTT columns othen than 'value' and 'timestamp' - note by add and "and" between each bring column users can set additional column values
# Sample call: "and column.measurement.str='bring [measurement]' and ..." 
#mqtt_extra_column=<mqtt_extra_column>	 

