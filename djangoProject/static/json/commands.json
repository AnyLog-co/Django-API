
{
  "commands" : [
    {"button": "Node Status",       "command": "get status", "type": "GET", "group" : "Monitor", "help_url" : "blob/master/monitoring%20nodes.md#the-get-status-command" },
    {"button": "Get Processes",     "command": "get processes", "type": "GET", "group" : "Monitor", "help_url" : "blob/master/monitoring%20nodes.md#the-get-processes-command" },
    {"button": "Get Dictionary",    "command": "get dictionary", "type": "GET", "group" : "Monitor", "help_url" : "blob/master/monitoring%20nodes.md#the-get-dictionary-command" },
    {"button": "Disk Usage",        "command": "get disk usage .", "type": "GET", "group" : "Monitor", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-state-commands" },
    {"button": "Disk Counters",     "command": "get node info disk_io_counters", "type": "GET", "group" : "Monitor", "help_url" : "blob/master/monitoring%20nodes.md#the-get-node-info-command" },
    {"button": "CPU Usage",         "command": "get cpu usage", "type": "GET", "group" : "Monitor", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-state-commands" },
    {"button": "Platform Info",     "command": "get platform info", "type": "GET", "group" : "Monitor", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-state-commands" },
    {"button": "Memory Info",       "command": "get memory info", "type": "GET", "group" : "Monitor", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-state-commands" },
    {"button": "Network Info",      "command": "get node info net_io_counters", "type": "GET", "group" : "Monitor", "help_url" : "blob/master/monitoring%20nodes.md#the-get-node-info-command" },
    {"button": "Swap Memory",       "command": "get node info swap_memory", "type": "GET", "group" : "Monitor", "help_url" : "blob/master/monitoring%20nodes.md#the-get-node-info-command" },

    {
      "button": "Members List",
      "command": "blockchain get (operator, publisher, query) bring.table [*][name] [*][country] [*][city] [*][ip] [*][port]",
      "type": "GET",
      "group": "Monitor"
    },
    {
      "button": "USA Members",
      "command":  "blockchain get (operator, publisher, query) where [country] contains US bring.table [*][name] [*][country] [*][city] [*][ip] [*][port]",
      "type": "GET",
      "group": "Monitor"
    },
    {
      "button": "Target USA",
      "command":  "blockchain get (operator, publisher, query) where [country] contains US  bring [*][ip] : [*][port]  separator = ,",
      "type": "GET",
      "group": "Monitor"
    },
    {
      "button": "AFG Operators",
      "command": "blockchain get operator where [company] contains AFG bring.table [*][name] [*][country] [*][city] [*][ip] [*][port]",
      "type": "GET",
      "group": "Monitor"
    },
    {
      "button": "Target AFG",
      "command": "blockchain get operator where [company] contains AFG bring [operator][ip] : [operator][port]  separator = ,",
      "type": "GET",
      "group": "Monitor"
    },

    {"button": "Event Log",         "command": "get event log where format=json", "type": "GET", "group" : "Logs", "help_url" : "blob/master/logging%20events.md#the-event-log" },
    {"button": "Error Log",         "command": "get error log where format=json", "type": "GET", "group" : "Logs", "help_url" : "blob/master/logging%20events.md#the-error-log" },
    {"button": "Streaming Log",     "command": "get streaming log where format=json", "type": "GET", "group" : "Logs", "help_url" : "blob/master/logging%20events.md#the-streaming-log" },
    {"button": "Query Log",         "command": "get query log where format=json", "type": "GET", "group" : "Logs", "help_url" : "blob/master/logging%20events.md#the-query-log" },
    {"button": "Reset Error Log", "command": "reset error log", "type": "POST", "group": "Logs", "help_url" : "blob/master/logging%20events.md#reset-the-log-data" },
    {"button": "Reset Streaming Log", "command": "reset streaming log", "type": "POST", "group": "Logs", "help_url" : "blob/master/logging%20events.md#reset-the-log-data" },
    {"button": "Streaming Log on", "command": "set rest log on", "type": "POST", "group": "Logs", "help_url" : "blob/master/logging%20events.md#the-streaming-log" },
    {"button": "Streaming Log off", "command": "set rest log off", "type": "POST", "group": "Logs", "help_url" : "blob/master/logging%20events.md#the-streaming-log" },

    {"button": "Get REST calls",    "command": "get rest calls", "type": "GET", "group" : "Southbound", "help_url" : "blob/master/monitoring%20calls.md#get-rest-calls"},
    {"button": "Get Streaming",     "command": "get streaming format = json", "type": "GET", "group" : "Southbound", "help_url" : "blob/master/monitoring%20calls.md#get-streaming"},
    {"button": "Get MSG Clients",   "command": "get msg clients", "type": "GET", "group" : "Southbound", "help_url" : "blob/master/monitoring%20calls.md#get-msg-clients"},
    {"button": "Get Operator",      "command": "get operator", "type": "GET", "group" : "Southbound", "help_url" : "blob/master/monitoring%20calls.md#get-operator"},
    {"button": "REST Server Info",  "command": "get rest server info", "type": "GET", "group" : "Southbound", "help_url" : "blob/master/monitoring%20calls.md#rest-server-configuration"},
    {"button": "Data Nodes", "command": "get data nodes", "type": "GET", "group" : "Southbound", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-data-commands"},

    {"button": "Queries Status",  "command": "query status all", "type": "GET", "group" : "Northbound", "help_url" : "blob/master/profiling%20and%20monitoring%20queries.md#command-options-for-profiling-and-monitoring-queries"},
    {"button": "Get Last Query Status",     "command": "query status", "type": "GET", "group" : "Northbound", "help_url" : "blob/master/profiling%20and%20monitoring%20queries.md#command-options-for-profiling-and-monitoring-queries"},
    {"button": "Get Rows Count",            "command": "get rows count", "type": "GET", "group" : "Northbound", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-data-commands"},
    {"button": "Get Rows Count by Table",   "command": "get rows count where group=table", "type": "GET", "group" : "Northbound", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-data-commands"},

    {"button": "Blockchain Operators",      "command": "blockchain get operator", "type": "GET", "group" : "Blockchain", "help_url" : "blob/master/blockchain%20commands.md"},
    {"button": "Blockchain Publishers",     "command": "blockchain get publisher", "type": "GET", "group" : "Blockchain", "help_url" : "blob/master/blockchain%20commands.md"},
    {"button": "Blockchain Queries",        "command": "blockchain get query", "type": "GET", "group" : "Blockchain", "help_url" : "blob/master/blockchain%20commands.md"},
    {"button": "Blockchain Tables",         "command": "blockchain get table", "type": "GET", "group" : "Blockchain", "help_url" : "blob/master/blockchain%20commands.md"},
    {"button": "Tables List",               "command": "blockchain get table bring.table.sort [table][dbms] [table][name]", "type": "GET", "group" : "Blockchain", "help_url" : "blob/master/blockchain%20commands.md"},
    {"button": "Cluster Table",             "command": "blockchain get cluster bring.table.sort [cluster][name] [cluster][table]", "type": "GET", "group" : "Blockchain", "help_url" : "blob/master/blockchain%20commands.md"},

    {"button": "QUERY Count",
     "command": "sql [DBMS] SELECT count(*) from [TABLE]", "type": "GET",
     "group" : "Queries",
     "help_url" : "blob/master/queries.md#queries"
    },

      {"button": "QUERY Minute",
       "command": "sql [DBMS] SELECT timestamp, value FROM [TABLE] WHERE timestamp > NOW() - 1 minute", "type": "GET",
       "group" : "Queries",
       "help_url" : "blob/master/queries.md#queries"},

      {"button": "QUERY Increments",
       "command": "sql [DBMS] select increments(day, 1, timestamp), min(timestamp) as min_ts, max(timestamp) as max_ts, min(value) as min_value, avg(value) as avg_value, max(value) as max_value, count(*) as row_count from [TABLE] limit 10",
       "type": "GET", "group" : "Queries",
       "help_url" : "blob/master/queries.md#queries"},

      {"button": "QUERY Period",
       "command": "sql [DBMS] select  max(timestamp), avg(value) from [TABLE] where period ( minute, 1, NOW(), timestamp)", "type": "GET",
       "group" : "Queries",
       "help_url" : "blob/master/queries.md#queries"},

      {"button": "Help Get", "command": "help get", "type": "GET", "group" : "Other", "help_url" : ""},
      {"button": "Help Blockchain", "command": "help blockchain", "type": "GET", "group" : "Other", "help_url" : ""},
      {"button": "Platform Info", "command": "get platform info", "type": "GET", "group" : "Other", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-state-commands"},
      {"button": "Memory Info", "command": "get memory info", "type": "GET", "group" : "Other", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-state-commands"},
      {"button": "CPU Info", "command": "get cpu info", "type": "GET", "group" : "Other", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-state-commands"},
      {"button": "Disk Info", "command": "get disk usage .", "type": "GET", "group" : "Other", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-state-commands"},
      {"button": "Timezone Info", "command": "get timezone info", "type": "GET", "group" : "Other", "help_url" : "blob/master/monitoring%20nodes.md#monitoring-state-commands"},
      {"button": "Date Time", "command": "get datetime pt now()", "type": "GET", "group" : "Other", "help_url" : "blob/master/queries.md#get-datetime-command"},

     {"button": "Edgex",
       "command": "sql edgex extend=(+country, +city, @ip, @port, @dbms_name, @table_name) and format = json and timezone = utc  select  file, start_ts::ljust(19), end_ts::ljust(19), num_cars, speed from videos where start_ts > '2022-08-06 00:00:00' and end_ts < '2022-08-06 23:59:59' order by speed --> selection (columns: ip using ip and port using port and dbms using dbms_name and table using table_name and file using file)", "type": "GET",
       "group" : "Video",
       "help_url" : "blob/master/queries.md#queries"},
    {"button": "Generic",
       "command": "sql [DBMS] extend=(+country, +city, @ip, @port, @dbms_name, @table_name) and format = json and timezone = utc  select  file, start_ts::ljust(19), end_ts::ljust(19), num_cars, speed from [TABLE] where start_ts > '2022-08-06 00:00:00' and end_ts < '2022-08-06 23:59:59' order by speed --> selection (columns: ip using ip and port using port and dbms using dbms_name and table using table_name and file using file)", "type": "GET",
       "group" : "Video",
       "help_url" : "blob/master/queries.md#queries"},

     {"button": "Data Nodes",
       "command": "get data nodes", "type": "GET",
       "group" : "Performance",
       "help_url" : "blob/master/high%20availability.md#view-the-distribution-of-data-to-clusters"},

     {"button": "Query Status",
       "command": "query status", "type": "GET",
       "group" : "Performance",
       "help_url" : "blob/master/profiling%20and%20monitoring%20queries.md#command-options-for-profiling-and-monitoring-queries"},

   {"button": "Query 1",
       "command": "sql [DBMS] format=table and extend=(+ip, +node_name) \"select min(insert_timestamp), max(insert_timestamp), count(*)::format(:,) from [TABLE];\"", "type": "GET",
       "group" : "Performance",
       "help_url" : "blob/master/queries.md#queries"},

    {"button": "Query 2",
       "command": "sql [DBMS] format=table  select increments(hour, 1, timestamp), min(timestamp), max(timestamp), min(value), avg(\nvalue), max(value), count(*)::format(:,) from [TABLE];", "type": "GET",
       "group" : "Performance",
       "help_url" : "blob/master/queries.md#queries"},
    {
      "button": "Operators Info",
      "command": "blockchain get operator bring.table [operator][name] [operator][country] [operator][city] [operator][ip] [operator][port]",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "US Operators",
      "command":  "blockchain get operator where [country] contains US bring.table [operator][name] [operator][country] [operator][city] [operator][ip] [operator][port]",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Target Operators",
      "command": "blockchain get operator where [company] contains IoTech bring [operator][ip] : [operator][port]  separator=,",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Disk Usage",
      "command": "get disk usage .",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Processes",
      "command": "get processes",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Platform",
      "command": "get platform info",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "CPU",
      "command": "get cpu usage",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Data Nodes",
      "command": "get data nodes",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Virtualized Tables",
      "command": "get virtual tables",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Get Columns",
      "command": "get columns where dbms=[DBMS] and table=[TABLE]",
      "type": "GET",
      "group": "Demo"
    },
   {
      "button": "Sensor Q1",
      "command": "sql litsanleandro format=table and include=(percentagecpu_sensor) and extend=(@table_name as table) \"select increments(minute, 1, timestamp), device_name, min(timestamp) as min_ts, max(timestamp) as max_ts, min(value) as min_value, avg(value) as avg_value, max(value) as max_value from ping_sensor where timestamp >= NOW() - 1hour GROUP BY device_name ORDER BY min_ts DESC\"",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Sensor Q2",
      "command": "sql litsanleandro format=table and include=(percentagecpu_sensor) \"select increments(minute, 1, timestamp), device_name, min(timestamp)::ljust(19)::rjust(8) as timestamp, min(value) as min, max(value) as max,  avg(value)::float(2) as avg, from ping_sensor where timestamp >= NOW() - 1hour GROUP BY device_name ORDER BY timestamp DESC\"",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Video",
      "command": "sql edgex extend=(+country, +city, @ip, @port, @dbms_name, @table_name) and format = json and timezone = utc  select  file, start_ts::ljust(19), end_ts::ljust(19), num_cars, speed from car_videos where start_ts >= NOW() - 1 hour and end_ts <= NOW() order by speed --> selection (columns: ip using ip and port using port and dbms using dbms_name and table using table_name and file using file)",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Factory Images",
      "command": "sql edgex extend=(+node_name, @ip, @port, @dbms_name, @table_name) and format = json and timezone=Europe/Dublin  select  timestamp, file, class, bbox, status  from factory_imgs where timestamp >= now() - 1 hour and timestamp <= NOW() order by timestamp desc --> selection (columns: ip using ip and port using port and dbms using dbms_name and table using table_name and file using file) -->  description (columns: bbox as shape.rect)",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Images",
      "command": "sql ibm extend=(+node_name, @ip, @port, @dbms_name, @table_name) and format = json and timezone=Europe/Dublin  select  timestamp, file, class, bbox from video_imgs where period(minute, 5, now(), timestamp) --> selection (columns: ip using ip and port using port and dbms using dbms_name and table using table_name and file using file) -->  description (columns: bbox as shape.rect)",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Table View",
      "command": "sql edgex format=table and extend=(+node_name as node)  \"select timestamp, value FROM rand_data WHERE period(minute, 15, NOW(), timestamp) ORDER BY timestamp;\"",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Streaming Video",
      "command": "sql edgex info = (dest_type = rest) and extend=(+country, +city, @ip, @port, @dbms_name, @table_name) and format = json and timezone = utc  select  file, start_ts::ljust(19), end_ts::ljust(19), people_count, confidence from people_counter     where start_ts >= NOW() - 1 hour and end_ts <= NOW() order by people_count, confidence --> selection (columns: ip using ip and port using port and dbms using dbms_name and table using table_name and file using file)",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Per Node summary",
      "command": "sql edgex format=table and extend=(+node_name, +ip)  \"SELECT MIN(timestamp), MAX(timestamp),  MIN(value), MAX(value), AVG(value), COUNT(*)  FROM  rand_data WHERE period(minute, 15, now(), timestamp);\"",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Per Node Data",
      "command": "sql edgex format=table and extend=(+node_name, +ip)  \"SELECT timestamp,  value FROM  rand_data WHERE timestamp >= NOW() - 15 minutes ORDER BY timestamp;\"",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Q. File",
      "command": "sql kubearmor format=table \"select increments(hour, 1, updated_timestamp), result, min(updated_timestamp) as min_ts, max(updated_timestamp) as max_ts, count(*) as row_count from logs where operation='File' group by result ORDER by min_ts;\"",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Q. Network",
      "command": "sql kubearmor format=json \"select timestamp, updated_timestamp, cluster_name, hostname, pod_name, container_id, container_name, host_pid, ppid, pid, type, resource, data, result, container_image, process_name, host_ppid, labels, owner_ref, owner_name, owner_namespace, source, parent_process_name, uid from logs WHERE operation='Network' limit 10\"",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Q. Process",
      "command": "sql kubearmor format=json and extend=(+node_name as node) \"select * from logs where period(minute, 1, now(), timestamp) and operation='Process' order by timestamp\"",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Syslog Status",
      "command": "get msg rules",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Syslog Count",
      "command": "sql edgelake format=table and include=(edgex.syslog, kubearmor.syslog, litsanleandro.syslog) \"select hostname, count(*) from syslog group by hostname\"",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "5 minute Syslog",
      "command": "sql edgelake format=table and include=(kubearmor.syslog, litsanleandro.syslog, edgex.syslog) and extend=(@dbms_name as dbms) \"select timestamp, hostname, priority, tag, message from syslog where period(minute, 5, now(), timestamp);\"",
      "type": "GET",
      "group": "Demo"
    },
    {
      "button": "Node Status",
      "command": "get status",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Node Connections",
      "command": "get connections",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Node Processes",
      "command": "get processes",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Connected Database",
      "command": "get databases",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Query Status",
      "command": "query status",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Data Nodes",
      "command": "get data nodes",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Blockchain",
      "command": "blockchain get *",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Network Nodes",
      "command": "blockchain get (operator, query, master) bring.table [*][id] [*][name] [*][ip] [*][port] [*][rest_port]",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Basic Query",
      "command": "sql !default_dbms format=table \"select count(*) from lightout1\"",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Data Summary 2",
      "command": "sql !default_dbms format=table and extend=(+node_name as node) \"select min(timestamp), max(timestamp), min(value), avg(value), max(value), count(*) from lightout1;\"",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Basic Query with LIMIT",
      "command": "sql !default_dbms format=table \"select insert_timestamp, tsd_name, timestamp, value  from lightout1 limit 100\"",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Query with Increments",
      "command": "sql !default_dbms format=table \"select increments(minute, 1, timestamp), min(timestamp) as min_ts, max(timestamp) as max_ts, min(value) as min_value, avg(value) as avg_value, max(value) as max_value from lightout1 where timestamp >= NOW() - 1hour ORDER BY min_ts DESC\"",
      "type": "GET",
      "group": "Training"
    },
    {
      "button": "Query with Period",
      "command": "sql !default_dbms format=table and extend=(+node_name as node) \"select timestamp, value  from lightout1 where period(minute, 10, now(), timestamp)\"",
      "type": "GET",
      "group": "Training"
    },

    {
      "button": "Node Status",
      "command": "get status",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Node Connections",
      "command": "get connections",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Node Processes",
      "command": "get processes",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Connected Database",
      "command": "get databases",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Query Status",
      "command": "query status",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Data Nodes",
      "command": "get data nodes",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Blockchain",
      "command": "blockchain get *",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Network Nodes",
      "command": "blockchain get (operator, query, master) bring.table [*][id] [*][name] [*][ip] [*][port] [*][rest_port]",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Basic Query",
      "command": "sql !default_dbms format=table \"select count(*) from random_float_device\"",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Data Summary",
      "command": "sql !default_dbms format=table and extend=(+node_name as node) \"select min(timestamp), max(timestamp), min(value), avg(value), max(value), count(*) from random_float_device;\"",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Data Summary per Table",
      "command": "sql !default_dbms format=table and extend=(+node_name as node) \"select min(timestamp), max(timestamp), min(value), avg(value), max(value), count(*) from random_float_device;\"",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Basic Query with LIMIT",
      "command": "sql !default_dbms format=table \"select insert_timestamp, tsd_name, timestamp, value  from random_float_device limit 100\"",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Query with Increments",
      "command": "sql !default_dbms format=table \"select increments(minute, 1, timestamp), min(timestamp) as min_ts, max(timestamp) as max_ts, min(value) as min_value, avg(value) as avg_value, max(value) as max_value from random_float_device where timestamp >= NOW() - 1hour ORDER BY min_ts DESC\"",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Query with Period",
      "command": "sql !default_dbms format=table and extend=(+node_name as node) \"select timestamp, value  from random_float_device where period(minute, 10, now(), timestamp)\"",
      "type": "GET",
      "group": "EdgeX"
    },
    {
      "button": "Source Data",
       "command": "sql edgex format=table and include=(freezertemp2) and extend=(+node_name as node, @table_name as table)  \"select reading_id, timestamp, units, value::float(3) FROM freezertemp1 WHERE period(minute, 15, NOW(), timestamp) ORDER BY timestamp;\"",
      "type": "GET",
      "group": "Webinar"
    },
    {
      "button": "Threshold",
      "command": "sql edgex format=table and include=(freezertemp2) and extend=(+node_name as node, @table_name as table)  \"select reading_id, timestamp, units, value::float(3) FROM freezertemp1 WHERE period(minute, 15, NOW(), timestamp) and value > 30 ORDER BY timestamp;\"",
      "type": "GET",
      "group": "Webinar"
    },
    {
      "button": "Per Node summary",
      "command": "sql edgex format=table and extend=(+node_name, +ip)  \"SELECT MIN(timestamp), MAX(timestamp),  MIN(value)::float(3), MAX(value)::float(3), AVG(value)::float(3), COUNT(*)  FROM  freezertemp1 WHERE period(minute, 15, now(), timestamp);\"",
      "type": "GET",
      "group": "Webinar"
    },
    {
      "button": "Table summary",
      "command": "sql edgex format=table \"select min(timestamp), max(timestamp), min(value)::float(3), max(value)::float(3), avg(value)::float(3), count(*) from freezertemp1 WHERE period(minute, 15, now(), timestamp);\"",
      "type": "GET",
      "group": "Webinar"
    },
    {
      "button": "Streaming Video",
      "command": "sql edgex info = (dest_type = rest) and extend=(+country, +city, @ip, @port, @dbms_name, @table_name) and format = json and timezone = utc  select  file, start_ts::ljust(19), end_ts::ljust(19), people_count, confidence::float(3) from people_counter     where start_ts >= NOW() - 1 hour and end_ts <= NOW() order by people_count, confidence --> selection (columns: ip using ip and port using port and dbms using dbms_name and table using table_name and file using file)",
      "type": "GET",
      "group": "Webinar"
    },
    {
      "button": "Last reading - commsstatus",
      "commnad": "sql smart_city format=table \"SELECT timestamp, id, commsstatus FROM [table] WHERE timestamp <= NOW() and commsstatus is not NULL ORDER BY timestamp DESC limit 1\"",
      "type": "GET",
      "group": "smart-city"
    },

    {
      "button": "Last Reading",
      "commnad": "sql smart_city format=table \"SELECT timestamp, id, a_current, a_n_voltage, b_current, b_n_voltage, c_current, c_n_voltage, energymultiplier, frequency, powerfactor, reactivepower, realpower FROM [table] WHERE timestamp <= NOW() and commsstatus is NULL ORDER BY timestamp DESC limit 1\"",
      "type": "GET",
      "group": "smart-city"
    },

    {
      "button": "Last Reading - ID",
      "commnad": "sql smart_city format=table \"SELECT timestamp, id, a_current, a_n_voltage, b_current, b_n_voltage, c_current, c_n_voltage, energymultiplier, frequency, powerfactor, reactivepower, realpower FROM [table] WHERE id = 9 and timestamp <= NOW() and commsstatus is NULL ORDER BY timestamp DESC limit 1\"",
      "type": "GET",
      "group": "smart-city"
    },

    {
      "button": "Last Interval",
      "commnad": "sql smart_city format=table \"SELECT timestamp, id, a_current, a_n_voltage, b_current, b_n_voltage, c_current, c_n_voltage, energymultiplier, frequency, powerfactor, reactivepower, realpower FROM [table] WHERE period(minute, 10, timestamp) and commsstatus is NULL ORDER BY timestamp ASC\"",
      "type": "GET",
      "group": "smart-city"
    },
    {
      "button": "Tables",
      "command": "get tables where dbms = kubearmor",
      "type": "GET",
      "group": "KubeArmor"
    },
    {
    "button": "Columns",
    "command": "get  columns where table = network and dbms = kubearmor",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Virtual",
    "command": "get virtual tables",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Data Nodes",
    "command": "get data nodes",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Test Network",
    "command": "test network",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Q. File",
    "command": "sql kubearmor format=table \"select increments(hour, 1, updated_timestamp), result, min(updated_timestamp) as min_ts, max(updated_timestamp) as max_ts, count(*) as row_count from file group by result ORDER by min_ts;\"",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Q. Network",
    "command": "sql kubearmor format=json \"select timestamp, updated_timestamp, cluster_name, hostname, namespace, pod_name, container_id, container_name, host_pid, ppid, pid, type, resource, data, result, container_image, process_name, host_ppid, labels, owner_ref, owner_name, owner_namespace, source, parent_process_name, uid from network limit 10\"",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Q. Process",
    "command": "sql kubearmor format=json and extend=(+node_name as node) \"select * from process where period(minute, 1, now(), timestamp) order by timestamp\"",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Mapping Policy",
    "command": "blockchain get mapping where id = kubearmor-system-policy",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "gRPC",
    "command": "get grpc  clients",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Streaming",
    "command": "get streaming",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Operator",
    "command": "get operator",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Operators IP",
    "command": " blockchain get operator bring.ip_port",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Disable Flag",
    "command": "set alert_flag_1 = false",
    "type": "SET",
    "group": "KubeArmor"
    },
    {
    "button": "Enable Flag",
    "command": "set alert_flag_1 = true",
    "type": "SET",
    "group": "KubeArmor"
    },

    {
    "button": "Reset Level",
    "command": "set alert_level = 0",

    "type": "SET",
    "group": "KubeArmor"
    },
    {
    "button": "Set Level",
    "command": "set alert_level = 6",
    "type": "SET",
    "group": "KubeArmor"
    },
    {
    "button": "Set Level 3",
    "command": "set alert_level = 3",
    "type": "SET",
    "group": "KubeArmor"
    },
    {
    "button": "Monitored Topics",
    "command": "get monitored",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
    "button": "Topic Alerts",
    "command": "get monitored alerts",
    "type": "GET",
    "group": "KubeArmor"
    },
    {
      "button": "Data Nodes",
      "command": "get data nodes",
      "type": "GET",
      "group": "CIDR"
    },
    {
      "button": "Get Columns",
      "command": "get columns where dbms=edgelab and table=lightout1",
      "type": "GET",
      "group": "CIDR"
    },
    {
      "button": "Source Data",
      "command": "sql edgelab format=table and include=(lightout2) and extend=(+node_name as node, @table_name as table)  \"select timestamp, value::float(3) FROM lightout1 WHERE period(minute, 15, NOW(), timestamp) ORDER BY timestamp;\"\n",
      "type": "GET",
      "group": "CIDR"
    },
    {
      "button": "Video",
      "command": "sql edgex extend=(+country, +city, @ip, @port, @dbms_name, @table_name) and format = json and timezone = utc  select  file, start_ts::ljust(19), end_ts::ljust(19), num_cars, speed from car_videos where start_ts >= NOW() - 1 hour and end_ts <= NOW() order by speed --> selection (columns: ip using ip and port using port and dbms using dbms_name and table using table_name and file using file) ",
      "type": "GET",
      "group": "CIDR"
    },
    {
      "button": "Image",
      "command": "sql edgex extend=(+node_name, @ip, @port, @dbms_name, @table_name) and format = json and timezone=Europe/Dublin  select  timestamp, file, class, bbox, score, status  from images where timestamp >= now() - 1 hour and timestamp <= NOW() order by timestamp desc --> selection (columns: ip using ip and port using port and dbms using dbms_name and table using table_name and file using file) -->  description (columns: bbox as shape.rect and score)",
      "type": "GET",
      "group": "CIDR"
    },
    {
      "button": "Streaming Video",
      "command": "sql edgex info = (dest_type = rest) and extend=(+country, +city, @ip, @port, @dbms_name, @table_name) and format = json and timezone = utc  select  file, start_ts::ljust(19), end_ts::ljust(19), people_count, confidence from people_counter where start_ts >= NOW() - 1 hour and end_ts <= NOW() order by people_count, confidence --> selection (columns: ip using ip and port using port and dbms using dbms_name and table using table_name and file using file)",
      "type": "GET",
      "group": "CIDR"
    }
  ]
}
